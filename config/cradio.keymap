/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        blefthintmove: blefthintmove {
            compatible = "zmk,behavior-hold-tap";
            label = "BLEFTHINTMOVE";
            bindings = <&mlefthintmove>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <21>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        blefthintshift: blefthintshift {
            compatible = "zmk,behavior-hold-tap";
            label = "BLEFTHINTSHIFT";
            bindings = <&mlefthintshift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <22>;
        };

        blefthint: blefthint {
            compatible = "zmk,behavior-hold-tap";
            label = "BLEFTHINT";
            bindings = <&mlefthint>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <23>;
        };

        brighthint: brighthint {
            compatible = "zmk,behavior-hold-tap";
            label = "BRIGHTHINT";
            bindings = <&mrighthint>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <26>;
            flavor = "tap-preferred";
        };

        brighthintshift: brighthintshift {
            compatible = "zmk,behavior-hold-tap";
            label = "BRIGHTHINTSHIFT";
            bindings = <&mrighthintshift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <27>;
        };

        brighthintmove: brighthintmove {
            compatible = "zmk,behavior-hold-tap";
            label = "BRIGHTHINTMOVE";
            bindings = <&mrighthintmove>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <28>;
            flavor = "tap-preferred";
        };

        bpassnormover: bpassnormover {
            compatible = "zmk,behavior-hold-tap";
            label = "BPASSNORMOVER";
            bindings = <&mpassover>, <&mpassnorm>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <32>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tognone {
            timeout-ms = <300>;
            key-positions = <0 9 30 33>;
            bindings = <&soft_off>;
        };
    };

    macros {
        mlefthintmove: lefthint2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp T &kp LA(X)>;
            label = "LEFTHINT2";
        };

        mlefthintshift: lefthintshift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp T &kp LA(LS(L))>;
            label = "LEFTHINTSHIFT";
        };

        mlefthint: lefthint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp T &kp LA(L)>;
            label = "LEFTHINT";
        };

        mrighthint: righthint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp N &kp LA(L)>;
            label = "RIGHTHINT";
        };

        mrighthintshift: righthintshift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp N &kp LS(LA(L))>;
            label = "RIGHTHINTSHIFT";
        };

        mrighthintmove: righthintmove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt INS &kt DELETE &kt INS &kt DELETE &kp N &kp LA(X)>;
            label = "RIGHTHINTMOVE";
        };

        mpassnorm: mpassnorm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N9 &kp N7 &kp N9 &kp TAB &kp N2 &kp N1 &kp N6 &kp N9>;
            label = "MPASSNORM";
        };

        mpassover: mpassover {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N6 &kp N4 &kp N3 &kp N5 &kp TAB &kp N1 &kp N2 &kp N3 &kp N6>;
            label = "MPASSOVER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W               &kp F                &kp P           &kp B                &kp J            &kp L            &kp U                     &kp Y                  &kp SQT
&kp A  &hm LGUI R          &hm LALT S           &hm LCTRL T     &hm LC(LA(TAB)) G    &kp M            &hm RCTRL N      &hm RALT E                &hm RGUI I             &kp O
&kp Z  &blefthintmove 0 X  &blefthintshift 0 C  &blefthint 0 D  &kp V                &kp K            &brighthint 0 H  &brighthintshift 0 COMMA  &brighthintmove 0 DOT  &kp SLASH
                                                &mo 2           &kp LEFT_SHIFT       &hm LA(C) SPACE  &mo 3
            >;
        };

        qwert_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T             &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G             &kp H      &kp J  &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V  &kp B             &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
                     &mo 2  &kp LEFT_SHIFT    &kp SPACE  &mo 3
            >;
        };

        nav_layer {
            bindings = <
&kp END                       &kp PAGE_DOWN              &kp PAGE_UP               &kp HOME               &hm LG(TAB) ESCAPE    &kp KP_PLUS   &kp N7        &kp N8       &kp N9       &kp KP_MULTIPLY
&kp LEFT_ARROW                &kp DOWN_ARROW             &kp UP_ARROW              &kp RIGHT_ARROW        &kp TAB               &kp DOT       &hm RCTRL N4  &hm RALT N5  &hm RGUI N6  &kp N0
&hm LC(LG(LEFT)) LA(LS(TAB))  &hm LC(LG(RIGHT)) LA(TAB)  &hm LA(LEFT) LC(LS(TAB))  &hm LA(RIGHT) LC(TAB)  &kp DELETE            &kp KP_MINUS  &kp N1        &kp N2       &kp N3       &kp KP_DIVIDE
                                                                                   &mo 2                  &kp LEFT_SHIFT        &kp RETURN    &mo 3
            >;
        };

        sym_layer {
            bindings = <
&none      &none   &none     &none     &none            &none               &kp AMPS  &kp GRAVE  &kp TILDE  &kp BACKSLASH
&kp SEMI   &kp LT  &kp LBRC  &kp LPAR  &kp RBKT         &kp EQUAL           &kp DLLR  &kp PRCNT  &kp CARET  &kp UNDER
&kp COLON  &kp GT  &kp RBRC  &kp RPAR  &kp RBKT         &none               &kp EXCL  &kp AT     &kp HASH   &kp PIPE
                             &mo 2     &kp BACKSPACE    &bpassnormover 0 0  &mo 3
            >;
        };

        tri_layer {
            bindings = <
&kp PRINTSCREEN  &kp C_MUTE       &kp C_VOLUME_DOWN      &kp C_VOLUME_UP   &bt BT_CLR_ALL    &tog 1  &kp F7        &kp F8       &kp F9       &kp F10
&kp CAPS         &hm LGUI C_PREV  &hm LALT C_PLAY_PAUSE  &hm LCTRL C_NEXT  &none             &none   &hm RCTRL F4  &hm RALT F5  &hm RGUI F6  &kp F11
&bt BT_SEL 4     &bt BT_SEL 3     &bt BT_SEL 2           &bt BT_SEL 1      &bt BT_SEL 0      &none   &kp F1        &kp F2       &kp F3       &kp F12
                                                         &trans            &kp LEFT_SHIFT    &none   &trans
            >;
        };
    };
};
